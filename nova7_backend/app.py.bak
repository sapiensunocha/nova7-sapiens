# --- Withdrawals: Request a Withdrawal ---
@app.route('/api/withdrawals/request', methods=['POST', 'OPTIONS'])
@jwt_required()
def request_withdrawal():
    if request.method == "OPTIONS":
        return _build_cors_preflight_response()
    current_user_id = get_jwt_identity()
    user = User.query.get_or_404(current_user_id)
    data = request.get_json()
    if not data or not data.get("amount"):
        return jsonify({"status": "error", "message": "Amount is required"}), 400
    try:
        amount = float(data.get("amount"))
        if amount <= 0:
            return jsonify({"status": "error", "message": "Amount must be positive"}), 400
    except ValueError:
        return jsonify({"status": "error", "message": "Invalid amount format"}), 400
    if amount > user.balance:
        return jsonify({"status": "error", "message": "Insufficient balance"}), 400

    payment_details = data.get("payment_details", {})
    if not payment_details or not payment_details.get("method"):
        return jsonify({"status": "error", "message": "Payment details with method are required"}), 400

    withdrawal_request = WithdrawalRequest(
        user_id=current_user_id,
        amount=amount,
        status="pending",
        request_date=datetime.now(timezone.utc),
        payment_details=payment_details
    )

    try:
        user.balance -= amount
        db.session.add(withdrawal_request)
        db.session.commit()
        msg = Message(
            subject="Withdrawal Request Submitted - nova7",
            recipients=[user.email],
            body=f"Hi {user.full_name},

Your withdrawal request for ${amount:.2f} has been submitted. You will be notified once it is processed.

Thank you,
The nova7 Team"
        )
        mail.send(msg)
        return jsonify({"status": "success", "message": "Withdrawal request submitted", "request_id": withdrawal_request.id}), 201
    except Exception as e:
        db.session.rollback()
        print(f"Error creating withdrawal request: {str(e)}")
        return jsonify({"status": "error", "message": "Failed to create withdrawal request due to server error"}), 500

# --- Product Lending: List a Lendable Product ---
@app.route('/api/lending/products/list', methods=['POST', 'OPTIONS'])
@jwt_required()
def list_lendable_product():
    if request.method == "OPTIONS":
        return _build_cors_preflight_response()
    current_user_id = get_jwt_identity()
    data = request.get_json()
    if not data or not data.get("title"):
        return jsonify({"status": "error", "message": "Title is required"}), 400

    title = data.get("title").strip()
    description = data.get("description", "").strip() or None
    category = data.get("category", "").strip() or None
    lending_terms = data.get("lending_terms", "").strip() or None
    image_urls = data.get("image_urls", []) if isinstance(data.get("image_urls"), list) else []

    new_product = LendableProduct(
        owner_id=current_user_id,
        title=title,
        description=description,
        category=category,
        lending_terms=lending_terms,
        image_urls=image_urls,
        availability_status="available"
    )

    try:
        db.session.add(new_product)
        db.session.commit()
        return jsonify({"status": "success", "message": "Lendable product listed successfully", "product_id": new_product.id}), 201
    except Exception as e:
        db.session.rollback()
        print(f"Error listing lendable product: {str(e)}")
        return jsonify({"status": "error", "message": "Failed to list product due to server error"}), 500


if __name__ == '__main__':
    app.run(debug=True, port=5005)

